<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p" 
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jpa="http://www.springframework.org/schema/data/jpa"
    xmlns:sec="http://www.springframework.org/schema/security"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
    ">
    
    <!-- this should ideally be split into different files for jpa, mvc, security... -->
    
    <!-- enable magic -->
    <context:component-scan base-package="com.flowerseeker"/>           <!-- scan for all spring injectable stuff -->
    <mvc:annotation-driven>                                            <!-- spring mvc for controllers and stuff -->
        <mvc:argument-resolvers>
            <bean class="org.springframework.data.web.PageableArgumentResolver"></bean> <!-- allow injecting of Pageable -->
        </mvc:argument-resolvers>
    </mvc:annotation-driven>
    
    <jpa:repositories base-package="com.flowerseeker.dao"/>             <!-- spring data jpa for repositories -->
                                                                        <!-- enable transactional annotations for methods -->
    <tx:annotation-driven transaction-manager="transactionManager"/>                                   
    
    <!-- Handles GET requests for /static/** by efficiently serving static content in the ${webappRoot}/static dir --> 
    <mvc:resources mapping="/static/**" location="/static/" /> 

    <context:property-placeholder location="jdbc.properties"/>
    
  <!-- should use jndi when actual deployment <jee:jndi-lookup id="dataSource" jndi-name="/jdbc/flowerseeker" resource-ref="true" /> -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
    <!-- use tomcat's pool instead? org.apache.tomcat.jdbc.pool.DataSource -->
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>  
    
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan" value="com.flowerseeker.domain"/> <!-- auto scan for entities -->
        <property name="jpaVendorAdapter">                                <!-- use hibernate as the jpa provider -->
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="generateDdl" value="true"/>
                <property name="showSql" value="true"/>
                <property name="database" value="MYSQL"/>
                <property name="databasePlatform" value="org.hibernate.dialect.MySQL5Dialect"/>
            </bean>
        </property>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
                <!-- The following 2 properties is convenient during development and testing - 
                     it'll auto create the tables when container starts and drop them when shut down
                     it'll also run the import.sql after table creation to insert test data
                -->
                <prop key="hibernate.hbm2ddl.auto">update</prop> <!-- when schema is stable, can change to create/update/validate -->
                <prop key="hibernate.hbm2ddl.import_files">/META-INF/import.sql</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.show_sql">true</prop> <!-- show what hibernate is doing in the console -->
            </props>
        </property>
        <property name="persistenceUnitName" value="mysqlPU" />
    </bean>
    
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
        <property name="jpaDialect">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect"/>
        </property>
    </bean>
    
    <!-- for form/multipart fileupload -->
    <bean id="multipartResolver"
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    </bean>
    
    <!-- for jsr-303 bean validation -->
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/>
    
    <!-- for finding views returned from mvc controllers -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/" />
        <property name="suffix" value=".jsp" />
    </bean>
   
    <bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.ShaPasswordEncoder"/>
 
    <sec:http pattern="/static/**" security="none"/>
    <sec:http use-expressions="true">
        <sec:intercept-url pattern="/login" access="permitAll" requires-channel="https"/>
        <sec:intercept-url pattern="/processlogin" access="permitAll" requires-channel="https"/>
        <sec:intercept-url pattern="/florist/register" access="permitAll" requires-channel="https"/>
        <sec:intercept-url pattern="/florist/ajax/**" access="permitAll"/>
        <sec:intercept-url pattern="/florist/**" access="isAuthenticated() and hasRole('florist')" requires-channel="https" />
        <sec:intercept-url pattern="/user/register" access="permitAll" requires-channel="https"/>
        <sec:intercept-url pattern="/user/ajax/**" access="permitAll"/>
        <sec:intercept-url pattern="/user/**" access="isAuthenticated() and hasRole('customer')" requires-channel="https" />
        <sec:intercept-url pattern="/admin/**" access="isAuthenticated() and hasRole('admin')" requires-channel="https"/>
        <sec:intercept-url pattern="/**" access="permitAll"/>
        <sec:form-login login-page="/login" 
            login-processing-url="/processlogin" 
            authentication-failure-url="/login?loginError=true" 
            default-target-url="/"/>     
        <sec:logout invalidate-session="true" logout-success-url="/" logout-url="/logout"/>
        <sec:port-mappings>
            <sec:port-mapping http="8080" https="8443"/>
        </sec:port-mappings>
    </sec:http>
   
    <bean id="userDetailsService" class="com.flowerseeker.services.UserService"/>
    
    <sec:authentication-manager>
        <sec:authentication-provider user-service-ref="userDetailsService">
            <sec:password-encoder hash="sha">
                <sec:salt-source user-property="username"/>
            </sec:password-encoder> 
        </sec:authentication-provider> 
    </sec:authentication-manager>
    
     <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="smtp.gmail.com" />
        <property name="port" value="587" />
        <property name="username" value="flowerseeker.dev@gmail.com" />
        <property name="password" value="flowerseek3r" />
 
        <property name="javaMailProperties">
            <props>
                <prop key="mail.smtp.auth">true</prop>
                <prop key="mail.smtp.starttls.enable">true</prop>
                <prop key="mail.smtp.debug">true</prop>
            </props>
        </property>
    </bean>
 
  
    
    
</beans>